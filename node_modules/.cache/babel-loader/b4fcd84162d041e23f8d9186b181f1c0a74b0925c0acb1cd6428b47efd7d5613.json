{"ast":null,"code":"// src/Map.js\nimport React,{useEffect,useState,useRef,useMemo}from\"react\";import{MapContainer,TileLayer,Marker,Popup,useMap}from\"react-leaflet\";import\"leaflet/dist/leaflet.css\";import L from\"leaflet\";import\"leaflet-routing-machine\";import locations from\"./locations\";import axios from\"axios\";import*as turf from'@turf/turf';import'leaflet/dist/leaflet.css';// Import sport icons\nimport athleticsIcon from\"./freebie-olympic-sports-icons/SVG/athletics.svg\";import artisticGymnasticsIcon from\"./freebie-olympic-sports-icons/SVG/artistic_gymnastics.svg\";import beachVolleyballIcon from\"./freebie-olympic-sports-icons/SVG/beach_volleyball.svg\";import swimmingIcon from\"./freebie-olympic-sports-icons/SVG/swimming.svg\";import boxingIcon from\"./freebie-olympic-sports-icons/SVG/boxing.svg\";import wrestlingIcon from\"./freebie-olympic-sports-icons/SVG/wrestling.svg\";import tennisIcon from\"./freebie-olympic-sports-icons/SVG/tennis.svg\";import volleyballIcon from\"./freebie-olympic-sports-icons/SVG/volleyball.svg\";import rugbyIcon from\"./freebie-olympic-sports-icons/SVG/rugby_sevens.svg\";import weightliftingIcon from\"./freebie-olympic-sports-icons/SVG/weightlifting.svg\";// Function to create an icon with dynamic size\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const createIcon=(iconUrl,zoom)=>{const size=Math.max(32,zoom*4);return new L.Icon({iconUrl,iconSize:[size,size],iconAnchor:[size/2,size],popupAnchor:[0,-size]});};// Component to handle zoom changes\nfunction ZoomHandler(_ref){let{setZoom}=_ref;const map=useMap();useEffect(()=>{map.on(\"zoomend\",()=>{setZoom(map.getZoom());});},[map,setZoom]);return null;}function RoutingMachine(_ref2){let{start,end}=_ref2;const map=useMap();const routingControlRef=useRef(null);useEffect(()=>{if(!start||!end)return;// Clean up existing routing control\nif(routingControlRef.current){try{routingControlRef.current.getPlan().setWaypoints([]);map.removeControl(routingControlRef.current);}catch(e){// Handle potential cleanup errors silently\n}}// Create new routing control\ntry{routingControlRef.current=L.Routing.control({waypoints:[L.latLng(start),L.latLng(end)],routeWhileDragging:false,lineOptions:{styles:[{color:\"#FF5733\",weight:6}]},createMarker:()=>null,// Prevent markers on waypoints\naddWaypoints:false,fitSelectedRoutes:false,showAlternatives:false}).addTo(map);// After the route is created, fetch points of interest\nroutingControlRef.current.on('routesfound',async function(e){const routes=e.routes;const routeGeoJSON=routes[0].coordinates;// Get the route coordinates\n// Create a LineString from the route\nconst line=turf.lineString(routeGeoJSON.map(coord=>[coord.lng,coord.lat]));// Define the distance in meters (5 miles)\nconst distanceInMiles=5;const distanceInMeters=distanceInMiles*1609.34;// Convert miles to meters\n// Fetch points of interest from Google Places API\nconst placesApiKey='YOUR_GOOGLE_PLACES_API_KEY';// Replace with your API key\nconst placesUrl=\"https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=\".concat(start.lat,\",\").concat(start.lng,\"&radius=\").concat(distanceInMeters,\"&type=restaurant&key=\").concat(placesApiKey);console.log('Fetching places from:',placesUrl);// Debugging log\ntry{const response=await axios.get(placesUrl);console.log('Response:',response.data);// Debugging log\nconst places=response.data.results;// Add points of interest within 5 miles of the route\nplaces.forEach(poi=>{const point=turf.point([poi.geometry.location.lng,poi.geometry.location.lat]);// [lng, lat]\nif(turf.distance(line,point,{units:'meters'})<=distanceInMeters){L.marker([poi.geometry.location.lat,poi.geometry.location.lng]).addTo(map).bindPopup(poi.name);// Add a popup with the name of the POI\n}});}catch(error){console.error('Error fetching places:',error);}});}catch(e){console.error('Error creating route:',e);}// Cleanup function\nreturn()=>{if(routingControlRef.current&&map){try{routingControlRef.current.getPlan().setWaypoints([]);map.removeControl(routingControlRef.current);}catch(e){// Handle cleanup errors silently\n}}};},[start,end,map]);}function Map(){const center=[34.0522,-118.2437];const[currentZoom,setCurrentZoom]=useState(10);const[selectedLocations,setSelectedLocations]=useState([]);// Define Southern California bounds\nconst southWest=L.latLng(33.4,-119.2);// San Clemente Island area\nconst northEast=L.latLng(34.8,-117.0);// San Bernardino area\nconst bounds=L.latLngBounds(southWest,northEast);// Dynamic icons object that updates with zoom\nconst dynamicIcons=useMemo(()=>({athletics:createIcon(athleticsIcon,currentZoom),artistic_gymnastics:createIcon(artisticGymnasticsIcon,currentZoom),beach_volleyball:createIcon(beachVolleyballIcon,currentZoom),swimming:createIcon(swimmingIcon,currentZoom),boxing:createIcon(boxingIcon,currentZoom),wrestling:createIcon(wrestlingIcon,currentZoom),tennis:createIcon(tennisIcon,currentZoom),volleyball:createIcon(volleyballIcon,currentZoom),rugby_sevens:createIcon(rugbyIcon,currentZoom),weightlifting:createIcon(weightliftingIcon,currentZoom)}),[currentZoom]);const handleMarkerClick=position=>{setSelectedLocations(prev=>{if(prev.length===2)return[position];// Reset if already 2 locations selected\nreturn[...prev,position];});};return/*#__PURE__*/_jsxs(MapContainer,{center:center,zoom:10,style:{height:\"100vh\",width:\"100%\"},zoomAnimation:true,minZoom:9// Restrict minimum zoom level\n,maxZoom:18// Restrict maximum zoom level\n,maxBounds:bounds// Restrict panning to SoCal\n,maxBoundsViscosity:1.0// Make bounds \"sticky\"\n,children:[/*#__PURE__*/_jsx(TileLayer,{url:\"https://{s}.basemaps.cartocdn.com/rastertiles/voyager/{z}/{x}/{y}{r}.png\",attribution:\"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors \\xA9 <a href=\\\"https://carto.com/attributions\\\">CARTO</a>\",bounds:bounds}),/*#__PURE__*/_jsx(ZoomHandler,{setZoom:setCurrentZoom}),locations.map((location,idx)=>/*#__PURE__*/_jsx(Marker,{position:location.position,icon:dynamicIcons[location.type]||dynamicIcons.athletics,eventHandlers:{click:()=>handleMarkerClick(location.position)},children:/*#__PURE__*/_jsxs(Popup,{children:[/*#__PURE__*/_jsx(\"strong\",{children:location.name}),/*#__PURE__*/_jsx(\"br\",{}),location.description]})},idx)),selectedLocations.length===2&&/*#__PURE__*/_jsx(RoutingMachine,{start:selectedLocations[0],end:selectedLocations[1]})]});}export default Map;","map":{"version":3,"names":["React","useEffect","useState","useRef","useMemo","MapContainer","TileLayer","Marker","Popup","useMap","L","locations","axios","turf","athleticsIcon","artisticGymnasticsIcon","beachVolleyballIcon","swimmingIcon","boxingIcon","wrestlingIcon","tennisIcon","volleyballIcon","rugbyIcon","weightliftingIcon","jsx","_jsx","jsxs","_jsxs","createIcon","iconUrl","zoom","size","Math","max","Icon","iconSize","iconAnchor","popupAnchor","ZoomHandler","_ref","setZoom","map","on","getZoom","RoutingMachine","_ref2","start","end","routingControlRef","current","getPlan","setWaypoints","removeControl","e","Routing","control","waypoints","latLng","routeWhileDragging","lineOptions","styles","color","weight","createMarker","addWaypoints","fitSelectedRoutes","showAlternatives","addTo","routes","routeGeoJSON","coordinates","line","lineString","coord","lng","lat","distanceInMiles","distanceInMeters","placesApiKey","placesUrl","concat","console","log","response","get","data","places","results","forEach","poi","point","geometry","location","distance","units","marker","bindPopup","name","error","Map","center","currentZoom","setCurrentZoom","selectedLocations","setSelectedLocations","southWest","northEast","bounds","latLngBounds","dynamicIcons","athletics","artistic_gymnastics","beach_volleyball","swimming","boxing","wrestling","tennis","volleyball","rugby_sevens","weightlifting","handleMarkerClick","position","prev","length","style","height","width","zoomAnimation","minZoom","maxZoom","maxBounds","maxBoundsViscosity","children","url","attribution","idx","icon","type","eventHandlers","click","description"],"sources":["/workspaces/DSCI554/deploy_dsci554/src/components/Map.js"],"sourcesContent":["// src/Map.js\nimport React, { useEffect, useState, useRef, useMemo } from \"react\";\nimport { MapContainer, TileLayer, Marker, Popup, useMap } from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport L from \"leaflet\";\nimport \"leaflet-routing-machine\";\nimport locations from \"./locations\";\nimport axios from \"axios\";\nimport * as turf from '@turf/turf';\nimport 'leaflet/dist/leaflet.css';\n\n// Import sport icons\nimport athleticsIcon from \"./freebie-olympic-sports-icons/SVG/athletics.svg\";\nimport artisticGymnasticsIcon from \"./freebie-olympic-sports-icons/SVG/artistic_gymnastics.svg\";\nimport beachVolleyballIcon from \"./freebie-olympic-sports-icons/SVG/beach_volleyball.svg\";\nimport swimmingIcon from \"./freebie-olympic-sports-icons/SVG/swimming.svg\";\nimport boxingIcon from \"./freebie-olympic-sports-icons/SVG/boxing.svg\";\nimport wrestlingIcon from \"./freebie-olympic-sports-icons/SVG/wrestling.svg\";\nimport tennisIcon from \"./freebie-olympic-sports-icons/SVG/tennis.svg\";\nimport volleyballIcon from \"./freebie-olympic-sports-icons/SVG/volleyball.svg\";\nimport rugbyIcon from \"./freebie-olympic-sports-icons/SVG/rugby_sevens.svg\";\nimport weightliftingIcon from \"./freebie-olympic-sports-icons/SVG/weightlifting.svg\";\n\n// Function to create an icon with dynamic size\nconst createIcon = (iconUrl, zoom) => {\n  const size = Math.max(32, zoom * 4);\n  return new L.Icon({\n    iconUrl,\n    iconSize: [size, size],\n    iconAnchor: [size / 2, size],\n    popupAnchor: [0, -size],\n  });\n};\n\n// Component to handle zoom changes\nfunction ZoomHandler({ setZoom }) {\n  const map = useMap();\n\n  useEffect(() => {\n    map.on(\"zoomend\", () => {\n      setZoom(map.getZoom());\n    });\n  }, [map, setZoom]);\n\n  return null;\n}\nfunction RoutingMachine({ start, end }) {\n  const map = useMap();\n  const routingControlRef = useRef(null);\n\n  useEffect(() => {\n    if (!start || !end) return;\n\n    // Clean up existing routing control\n    if (routingControlRef.current) {\n      try {\n        routingControlRef.current.getPlan().setWaypoints([]);\n        map.removeControl(routingControlRef.current);\n      } catch (e) {\n        // Handle potential cleanup errors silently\n      }\n    }\n\n    // Create new routing control\n    try {\n      routingControlRef.current = L.Routing.control({\n        waypoints: [L.latLng(start), L.latLng(end)],\n        routeWhileDragging: false,\n        lineOptions: {\n          styles: [{ color: \"#FF5733\", weight: 6 }],\n        },\n        createMarker: () => null, // Prevent markers on waypoints\n        addWaypoints: false,\n        fitSelectedRoutes: false,\n        showAlternatives: false,\n      }).addTo(map);\n\n      // After the route is created, fetch points of interest\n      routingControlRef.current.on('routesfound', async function(e) {\n        const routes = e.routes;\n        const routeGeoJSON = routes[0].coordinates; // Get the route coordinates\n\n        // Create a LineString from the route\n        const line = turf.lineString(routeGeoJSON.map(coord => [coord.lng, coord.lat]));\n\n        // Define the distance in meters (5 miles)\n        const distanceInMiles = 5;\n        const distanceInMeters = distanceInMiles * 1609.34; // Convert miles to meters\n\n        // Fetch points of interest from Google Places API\n        const placesApiKey = 'YOUR_GOOGLE_PLACES_API_KEY'; // Replace with your API key\n        const placesUrl = `https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=${start.lat},${start.lng}&radius=${distanceInMeters}&type=restaurant&key=${placesApiKey}`;\n\n        console.log('Fetching places from:', placesUrl); // Debugging log\n\n        try {\n          const response = await axios.get(placesUrl);\n          console.log('Response:', response.data); // Debugging log\n          const places = response.data.results;\n\n          // Add points of interest within 5 miles of the route\n          places.forEach(poi => {\n            const point = turf.point([poi.geometry.location.lng, poi.geometry.location.lat]); // [lng, lat]\n            if (turf.distance(line, point, { units: 'meters' }) <= distanceInMeters) {\n              L.marker([poi.geometry.location.lat, poi.geometry.location.lng])\n                .addTo(map)\n                .bindPopup(poi.name); // Add a popup with the name of the POI\n            }\n          });\n        } catch (error) {\n          console.error('Error fetching places:', error);\n        }\n      });\n\n    } catch (e) {\n      console.error('Error creating route:', e);\n    }\n\n    // Cleanup function\n    return () => {\n      if (routingControlRef.current && map) {\n        try {\n          routingControlRef.current.getPlan().setWaypoints([]);\n          map.removeControl(routingControlRef.current);\n        } catch (e) {\n          // Handle cleanup errors silently\n        }\n      }\n    };\n  }, [start, end, map]);\n}\nfunction Map() {\n  const center = [34.0522, -118.2437];\n  const [currentZoom, setCurrentZoom] = useState(10);\n  const [selectedLocations, setSelectedLocations] = useState([]);\n\n  // Define Southern California bounds\n  const southWest = L.latLng(33.4, -119.2); // San Clemente Island area\n  const northEast = L.latLng(34.8, -117.0); // San Bernardino area\n  const bounds = L.latLngBounds(southWest, northEast);\n\n  // Dynamic icons object that updates with zoom\n  const dynamicIcons = useMemo(() => ({\n    athletics: createIcon(athleticsIcon, currentZoom),\n    artistic_gymnastics: createIcon(artisticGymnasticsIcon, currentZoom),\n    beach_volleyball: createIcon(beachVolleyballIcon, currentZoom),\n    swimming: createIcon(swimmingIcon, currentZoom),\n    boxing: createIcon(boxingIcon, currentZoom),\n    wrestling: createIcon(wrestlingIcon, currentZoom),\n    tennis: createIcon(tennisIcon, currentZoom),\n    volleyball: createIcon(volleyballIcon, currentZoom),\n    rugby_sevens: createIcon(rugbyIcon, currentZoom),\n    weightlifting: createIcon(weightliftingIcon, currentZoom),\n  }), [currentZoom]);\n\n  const handleMarkerClick = (position) => {\n    setSelectedLocations((prev) => {\n      if (prev.length === 2) return [position]; // Reset if already 2 locations selected\n      return [...prev, position];\n    });\n  };\n\n  return (\n    <MapContainer\n      center={center}\n      zoom={10}\n      style={{ height: \"100vh\", width: \"100%\" }}\n      zoomAnimation={true}\n      minZoom={9} // Restrict minimum zoom level\n      maxZoom={18} // Restrict maximum zoom level\n      maxBounds={bounds} // Restrict panning to SoCal\n      maxBoundsViscosity={1.0} // Make bounds \"sticky\"\n    >\n      <TileLayer\n        url=\"https://{s}.basemaps.cartocdn.com/rastertiles/voyager/{z}/{x}/{y}{r}.png\"\n        attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors &copy; <a href=\"https://carto.com/attributions\">CARTO</a>'\n        bounds={bounds}\n      />\n      <ZoomHandler setZoom={setCurrentZoom} />\n      {locations.map((location, idx) => (\n        <Marker\n          key={idx}\n          position={location.position}\n          icon={dynamicIcons[location.type] || dynamicIcons.athletics}\n          eventHandlers={{\n            click: () => handleMarkerClick(location.position),\n          }}\n        >\n          <Popup>\n            <strong>{location.name}</strong>\n            <br />\n            {location.description}\n          </Popup>\n        </Marker>\n      ))}\n      {selectedLocations.length === 2 && (\n        <RoutingMachine\n          start={selectedLocations[0]}\n          end={selectedLocations[1]}\n        />\n      )}\n    </MapContainer>\n  );\n}\n\nexport default Map;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}